// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//AUTH modelling



model TechStack {
  id Int @id @default(autoincrement())
  name String @unique
  type StackType
  imageUrl String
  org OrgStack__[]
  individual IndividualUserStack__[]
}

enum StackType {
  LANGUAGE
  FRAMEWORK
  LIBRARY
  SDK
  TOOLING
}

model Post{
  id Int @id @default(autoincrement())
  description String
  videoUrl String
  images String[]
  // likedBy [] 
  createdAt DateTime
  updatedAt DateTime
}

//TODOLRemodel based on this query https://chatgpt.com/c/d2bdb1a7-6068-4305-8286-65f724ecc1b1

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  userType   UserType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  individual IndividualUser?
  enterprise OrganisationUser?
}

enum UserType {
  INDIVIDUAL
  ENTERPRISE
}
model OrganisationUser{
  userId Int @id @default(autoincrement())
  name String
  primaryType OrgType
  secondaryType OrgType
  stack OrgStack__[]
  projects OrganisationProject__[]
  createdAt DateTime
  updatedAt DateTime
  user         User    @relation(fields: [userId], references: [id])
}

model IndividualUser{
  userId Int @id @default(autoincrement())
  name String
  username String @unique
  github String //Validate later
  gitlab String //Validate later
  sideProjects  IndividualUserProject__[]
  stack IndividualUserStack__[]
  createdAt DateTime
  updatedAt DateTime
  user      User    @relation(fields: [userId], references: [id])
}


model IndividualUserProject__{
  userId Int
  projectId Int
  user IndividualUser @relation(fields: [userId], references: [userId])
  project Project @relation(fields: [projectId], references: [id])

@@id([projectId,userId])

}


model OrganisationProject__{
  orgId Int
  projectId Int
  org OrganisationUser @relation(fields: [orgId],references: [userId])
  project Project @relation(fields: [projectId], references: [id])
  
  @@id([orgId,projectId])
}
model Project{
  id Int @id @default(autoincrement())
  name String
  description String //make it markdown
  githubLink String @unique
  gitlabLink String @unique
  IndividualUserOwner IndividualUserProject__[]
  orgOwner OrganisationProject__[]

}

enum OrgType {
  MEETUP_FOCUSED
  COMMUNITY_FOCUSED
  CONFERENCE_FOCUSED
  TOOLING
  FRAMEWORK
  SAAS
  OPEN_SOURCE_ENTHUSIAST
  OPEN_SOURCE_FOCUSED
  DATABASE

}

model OrgStack__ {
stackId Int
orgId Int
org OrganisationUser   @relation(fields: [orgId],references: [userId])
stack  TechStack   @relation(fields: [stackId],references: [id])

@@id([orgId,stackId])

}

model IndividualUserStack__{
  stackId Int
  userId Int
  user IndividualUser @relation(fields: [userId],references:[userId])
  stack  TechStack   @relation(fields: [stackId],references: [id])

  @@id([userId, stackId])
}